tomcat占用CPU很高怎么办？

[root@VM_12_106_centos ~]# top
top - 14:08:23 up 623 days, 17:38,  1 user,  load average: 6.86, 6.98, 6.81
Tasks: 142 total,   2 running, 140 sleeping,   0 stopped,   0 zombie
%Cpu(s): 98.6 us,  0.7 sy,  0.0 ni,  0.6 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 st
KiB Mem :  8010952 total,   370156 free,  3480952 used,  4159844 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  4204576 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
16525 root      20   0 9866.8m 1.504g  10444 S 393.0 19.7   6101:52 java
16766 nginx     20   0   38128  13400   1024 S   0.3  0.2  14:49.90 nginx
16767 nginx     20   0   38128  13400   1024 S   0.3  0.2  16:12.60 nginx
    1 root      20   0 1613132 1.424g   1856 S   0.0 18.6 148:21.59 systemd
    2 root      20   0       0      0      0 S   0.0  0.0   0:10.39 kthreadd
    3 root      20   0       0      0      0 S   0.0  0.0 187:26.16 ksoftirqd/0
    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H
    7 root      rt   0       0      0      0 S   0.0  0.0   4:45.18 migration/0
    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh
    9 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/0
   10 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/1
   11 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/2
   12 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/3
   13 root      20   0       0      0      0 S   0.0  0.0 740:44.29 rcu_sched
   14 root      20   0       0      0      0 S   0.0  0.0 242:39.42 rcuos/0
   15 root      20   0       0      0      0 R   0.0  0.0 237:05.36 rcuos/1
   16 root      20   0       0      0      0 S   0.0  0.0 217:09.50 rcuos/2

系统是4核的，上面是命令可以看到tomcat占了几乎所有的CPU资源。

我们根据Java的进程ID，top命令查看该主进程下面的线程：
[root@VM_12_106_centos ~]# top -H -p 16525
top - 14:10:02 up 623 days, 17:39,  1 user,  load average: 6.73, 6.94, 6.82
Threads: 104 total,   4 running, 100 sleeping,   0 stopped,   0 zombie
%Cpu(s): 97.4 us,  2.4 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st
KiB Mem :  8010952 total,   368920 free,  3480840 used,  4161192 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  4205056 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
16654 root      20   0 9866.8m 1.504g  10444 R 97.0 19.7   2575:20 java
16770 root      20   0 9866.8m 1.504g  10444 R 96.7 19.7 224:23.86 java
16772 root      20   0 9866.8m 1.504g  10444 R 93.7 19.7   2561:00 java
16650 root      20   0 9866.8m 1.504g  10444 R 65.0 19.7 244:52.86 java
16653 root      20   0 9866.8m 1.504g  10444 S 31.0 19.7  26:03.32 java
16651 root      20   0 9866.8m 1.504g  10444 S  0.7 19.7  25:12.87 java
16639 root      20   0 9866.8m 1.504g  10444 S  0.3 19.7  25:19.13 java
16641 root      20   0 9866.8m 1.504g  10444 S  0.3 19.7  25:23.76 java
16648 root      20   0 9866.8m 1.504g  10444 S  0.3 19.7  25:03.48 java
17501 root      20   0 9866.8m 1.504g  10444 S  0.3 19.7   0:09.04 java
22152 root      20   0 9866.8m 1.504g  10444 S  0.3 19.7  19:49.57 java
16525 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:00.00 java
16527 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:00.81 java
16528 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:42.90 java
16529 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:43.17 java
16530 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:42.74 java
16531 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:42.92 java
16532 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   2:05.41 java
16533 root      20   0 9866.8m 1.504g  10444 S  0.0 19.7   0:02.65 java

可以看到，几个主要的线程占了大部分的CPU

查看磁盘IO，很低
[root@VM_12_106_centos ~]#iostat -x 1

[root@VM_12_106_centos ~]# jmap -heap java 16525
Attaching to core 16525 from executable java, please wait...
Error attaching to core file: Can't attach to the core file
[root@VM_12_106_centos ~]#
[root@VM_12_106_centos ~]# jps 16525
RMI Registry not available at 16525:1099
Exception creating connection to: 16525; nested exception is:
	java.net.SocketException: Invalid argument or cannot assign requested address
[root@VM_12_106_centos ~]#
[root@VM_12_106_centos ~]#jstack  16525 > jstack.log

查看jstack.log看到很多雷同的日志
"pool-3-thread-6" prio=10 tid=0x0000000001cce800 nid=0x7bb8 waiting on condition [0x00007ff3a17b5000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x000000068710b968> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

top -H -p 16525，观察一会，可以看到几个线程ID一直不变，
16770 转换为十六进制是0x4182
[root@VM_12_106_centos ~]#jstack  16525  | grep  -B5 -A30 '0x4182' 或者 grep  -B5 -A30 '0x4182' jstack.log
at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

"pool-2-thread-1" prio=10 tid=0x00007ff334151000 nid=0x4182 runnable [0x00007ff3becd8000]
   java.lang.Thread.State: RUNNABLE
	at java.util.HashMap.put(HashMap.java:494)
	at com.puyitou.user.MyClientService.operation(MyClientService.java:92)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452.CGLIB$operation$2(<generated>)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452$$FastClassByCGLIB$$3d9fddc2.invoke(<generated>)
	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:167)
	at com.puyitou.framework.service.MethodInvoker.invokeOriginal(MethodInvoker.java:402)
	at com.puyitou.framework.service.MethodInvoker.start(MethodInvoker.java:112)
	at com.puyitou.framework.service.MethodInvoker.start(MethodInvoker.java:98)
	at com.puyitou.framework.service.PYTAsmServiceProxy.invokeMethod(PYTAsmServiceProxy.java:281)
	at com.puyitou.framework.service.PYTAsmServiceProxy.interceptTransaction(PYTAsmServiceProxy.java:366)
	at com.puyitou.framework.service.PYTAsmServiceProxy.intercept(PYTAsmServiceProxy.java:162)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452.operation(<generated>)
	at com.puyitou.user.MyClientService.myClinet(MyClientService.java:54)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452.CGLIB$myClinet$0(<generated>)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452$$FastClassByCGLIB$$3d9fddc2.invoke(<generated>)
	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:167)
	at com.puyitou.framework.service.MethodInvoker.invokeOriginal(MethodInvoker.java:402)
	at com.puyitou.framework.service.MethodInvoker.start(MethodInvoker.java:112)
	at com.puyitou.framework.service.MethodInvoker.start(MethodInvoker.java:98)
	at com.puyitou.framework.service.PYTAsmServiceProxy.invokeMethod(PYTAsmServiceProxy.java:281)
	at com.puyitou.framework.service.PYTAsmServiceProxy.interceptTransaction(PYTAsmServiceProxy.java:366)
	at com.puyitou.framework.service.PYTAsmServiceProxy.intercept(PYTAsmServiceProxy.java:162)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452.myClinet(<generated>)
	at com.puyitou.user.MyClientService.execute(MyClientService.java:26)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452.CGLIB$execute$1(<generated>)
	at com.puyitou.user.MyClientService$$EnhancerByCGLIB$$750b4452$$FastClassByCGLIB$$3d9fddc2.invoke(<generated>)
	at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:167)
	at com.puyitou.framework.service.MethodInvoker.invokeOriginal(MethodInvoker.java:402)
	at com.puyitou.framework.service.MethodInvoker.start(MethodInvoker.java:112)


通过线程定位出问题的tocmat服务，从上面的日志定位到出问题的代码

2018-08-11
比较悲剧的是，CPU100%的时候，这个命令也用不了
[root@VM_12_191_centos ~]# jstack 9612
9612: Unable to open socket file: target process not responding or HotSpot VM not loaded
The -F option can be used when the target process is not responding
杀掉其中一个线程kill -9 9611，整个tomcat都被关了。。。怎么回事？

